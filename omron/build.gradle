buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.21.7'
    }
}
version = '0.0.1'
apply from: 'versioning.gradle'

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

def store_file = "keystore_missing"
if (hasProperty('MD2K_RELEASE_STORE_FILE')) {
    store_file = MD2K_RELEASE_STORE_FILE
} else if (System.getenv('MD2K_RELEASE_STORE_FILE')) {
    store_file = System.getenv('MD2K_RELEASE_STORE_FILE')
} else {
    println "ERROR: " + store_file
}

def store_password = "keystore_password_missing"
if (hasProperty('MD2K_RELEASE_STORE_PASSWORD')) {
    store_password = MD2K_RELEASE_STORE_PASSWORD
} else if (System.getenv('MD2K_RELEASE_STORE_PASSWORD')) {
    store_password = System.getenv('MD2K_RELEASE_STORE_PASSWORD')
} else {
    println "ERROR: " + store_password
}


def key_alias = "release_key_alias_missing"
if (hasProperty('MD2K_RELEASE_KEY_ALIAS')) {
    key_alias = MD2K_RELEASE_KEY_ALIAS
} else if (System.getenv('MD2K_RELEASE_KEY_ALIAS')) {
    key_alias = System.getenv('MD2K_RELEASE_KEY_ALIAS')
} else {
    println "ERROR: " + key_alias
}

def key_password = "release_key_password_missing"
if (hasProperty('MD2K_RELEASE_KEY_PASSWORD')) {
    key_password = MD2K_RELEASE_KEY_PASSWORD
} else if (System.getenv('MD2K_RELEASE_KEY_PASSWORD')) {
    key_password = System.getenv('MD2K_RELEASE_KEY_PASSWORD')
} else {
    println "ERROR: " + key_password
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        applicationId "org.md2k.omron"
        minSdkVersion 19
        targetSdkVersion 23
        versionCode buildVersionCode()
        versionName version
    }
    signingConfigs {
        release {

            storeFile file(store_file)
            storePassword store_password
            keyAlias key_alias
            keyPassword key_password
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig getSigningConfig()
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    output.outputFile = new File(output.outputFile.parent, output.outputFile.name.replace("-release", "${variant.versionName}"))
                }
            }
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile project(':datakitapi')
    compile project(':utilities')
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.1.1'
    compile 'com.github.paolorotolo:appintro:4.0.0'
    compile('com.crashlytics.sdk.android:crashlytics:2.6.2@aar') {
        transitive = true;
    }
}
